// Code generated by goyacc -l -o sql.go sql.y. DO NOT EDIT.
package sql

import __yyfmt__ "fmt"

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Lexer).ParseTree = stmt
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Lexer).partialDDL = ddl
}

type yySymType struct {
	yys              int
	empty            struct{}
	statement        Statement
	selStmt          SelectStatement
	selectExprs      SelectExprs
	selectExpr       SelectExpr
	expr             Expr
	colName          *ColName
	colIdent         ColIdent
	tableIdent       TableIdent
	bytes            []byte
	tableExprs       TableExprs
	tableExpr        TableExpr
	tableName        TableName
	tableNames       TableNames
	TableSpec        *TableSpec
	aliasedTableName *AliasedTableExpr
	columnDefinition *ColumnDefinition
	columnType       ColumnType
	colKeyOpt        ColumnKeyOption
	ddl              *DDL
	optVal           *SQLVal
	boolVal          BoolVal

	string string
	str    string
}

const SELECT = 57346
const FROM = 57347
const COMMA = 57348
const AS = 57349
const LPAREN = 57350
const RPAREN = 57351
const COUNT = 57352
const INTEGER = 57353
const TEXT = 57354
const BLOB = 57355
const CREATE = 57356
const PRIMARY = 57357
const KEY = 57358
const AUTOINCREMENT = 57359
const TABLE = 57360
const STAR = 57361
const IDENTIFIER = 57362
const STRING = 57363

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"'.'",
	"SELECT",
	"FROM",
	"COMMA",
	"AS",
	"LPAREN",
	"RPAREN",
	"COUNT",
	"INTEGER",
	"TEXT",
	"BLOB",
	"CREATE",
	"PRIMARY",
	"KEY",
	"AUTOINCREMENT",
	"TABLE",
	"STAR",
	"IDENTIFIER",
	"STRING",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 23,
	4, 18,
	-2, 17,
}

const yyPrivate = 57344

const yyLast = 80

var yyAct = [...]int8{
	21, 62, 49, 26, 20, 14, 32, 52, 22, 10,
	63, 55, 35, 33, 40, 27, 35, 15, 23, 24,
	73, 34, 72, 40, 70, 39, 35, 44, 45, 46,
	42, 39, 38, 41, 7, 47, 65, 37, 34, 12,
	53, 56, 60, 57, 8, 9, 58, 30, 29, 36,
	1, 69, 71, 64, 66, 59, 43, 25, 11, 6,
	51, 39, 50, 67, 64, 68, 48, 28, 61, 31,
	54, 18, 19, 17, 16, 13, 5, 3, 4, 2,
}

var yyPact = [...]int16{
	29, -1000, -14, -1000, -1000, -1000, 30, -3, 0, -1000,
	-1000, -1000, -6, 41, -1000, -1000, 5, -1000, -1000, -1000,
	-1000, 45, 28, -1000, -7, 23, -1000, 15, -1000, -3,
	-7, -1000, -1000, -5, -1000, -1000, -9, -3, -1000, -1000,
	-1000, -1000, -6, -1000, -1000, -1000, -1000, -1000, 35, -1000,
	-1000, -1000, 2, -1000, -1000, -1000, -1000, 26, -1000, -1000,
	-7, -1000, -1000, -7, -1000, -1000, 8, -1000, -1000, 4,
	3, -1000, -1000, -1000,
}

var yyPgo = [...]int8{
	0, 79, 78, 77, 76, 75, 5, 74, 73, 72,
	71, 4, 70, 69, 6, 0, 1, 68, 67, 66,
	2, 62, 7, 60, 3, 59, 58, 57, 56, 55,
	54, 52, 51, 50, 45,
}

var yyR1 = [...]int8{
	0, 33, 34, 34, 1, 1, 3, 4, 5, 5,
	6, 6, 7, 8, 8, 10, 10, 11, 15, 12,
	12, 13, 13, 13, 14, 9, 18, 18, 19, 19,
	20, 21, 23, 22, 17, 17, 17, 16, 2, 25,
	26, 27, 27, 24, 28, 28, 28, 29, 30, 32,
	32, 31, 31,
}

var yyR2 = [...]int8{
	0, 2, 0, 1, 1, 1, 1, 3, 1, 3,
	1, 2, 1, 1, 1, 1, 3, 1, 1, 1,
	1, 0, 1, 2, 1, 4, 0, 2, 1, 3,
	1, 1, 2, 1, 0, 1, 2, 1, 2, 3,
	3, 1, 3, 6, 1, 1, 1, 0, 0, 0,
	2, 0, 1,
}

var yyChk = [...]int16{
	-1000, -33, -1, -3, -2, -4, -25, 5, 15, -34,
	23, -26, 9, -5, -6, 20, -7, -8, -10, -9,
	-11, -15, 11, 21, 19, -27, -24, 21, -18, 7,
	6, -13, -14, 8, -11, 21, 4, 9, -22, -15,
	21, 10, 7, -28, 12, 13, 14, -6, -19, -20,
	-21, -23, -22, -14, -12, 20, -11, -6, -24, -29,
	7, -17, -16, 8, -15, 10, -30, -20, -16, -32,
	16, -31, 18, 17,
}

var yyDef = [...]int8{
	0, -2, 2, 4, 5, 6, 0, 0, 0, 1,
	3, 38, 0, 26, 8, 10, 21, 12, 13, 14,
	15, 0, 0, -2, 0, 0, 41, 0, 7, 0,
	0, 11, 22, 0, 24, 17, 0, 0, 39, 33,
	18, 40, 0, 47, 44, 45, 46, 9, 27, 28,
	30, 31, 34, 23, 16, 19, 20, 0, 42, 48,
	0, 32, 35, 0, 37, 25, 49, 29, 36, 51,
	0, 43, 52, 50,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 4, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 23,
}

var yyTok2 = [...]int8{
	2, 3, 5, 6, 7, 8, 9, 10, 11, 12,
	13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			sel := yyDollar[1].selStmt.(*Select)
			yyVAL.selStmt = sel
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.selStmt = &Select{SelectExprs: yyDollar[2].selectExprs, From: yyDollar[3].tableExprs}
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].str))
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].str))
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.colIdent = NewColIdent(string('*'))
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 21:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("count"), Exprs: NewSelectExprs(yyDollar[3].selectExpr)}
		}
	case 26:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 27:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableExpr = yyDollar[1].tableExpr
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 32:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 34:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 38:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.ddl = &DDL{Action: CreateStr, NewName: yyDollar[3].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyDollar[2].columnType.Default = yyDollar[3].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[4].optVal
			yyDollar[2].columnType.KeyOpt = yyDollar[5].colKeyOpt
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].str)), Type: yyDollar[2].columnType}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnType = NewIntegerColumn()
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnType = NewTextColumn()
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.columnType = NewBlobColumn()
		}
	case 47:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.optVal = nil
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.optVal = nil
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.colKeyOpt = ColKeyNone
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.colKeyOpt = ColKeyPrimary
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.boolVal = BoolVal(true)
		}
	}
	goto yystack /* stack new state and value */
}
